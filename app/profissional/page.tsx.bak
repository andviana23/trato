"use client";
import { useEffect, useMemo, useState } from "react";
import { useRequireAuth, useAuth, usePermissions } from "@/lib/contexts/AuthContext";
import { Avatar, Button, Card, CardBody, CardHeader, CircularProgress, Modal, ModalContent, ModalHeader, ModalBody, ModalFooter, Progress, Divider } from "@nextui-org/react";
import { HomeIcon, CalendarIcon, ChartBarIcon, UsersIcon, Bars3Icon, FunnelIcon, ChevronRightIcon } from "@heroicons/react/24/outline";
import dayjs from "dayjs";
import { createClient } from "@/lib/supabase/client";
import { getAssinaturas } from "@/lib/services/subscriptions";
import { getConfirmedAsaasPayments } from "@/lib/services/payments";
import { getComissoesAvulsas, getVendasProdutos } from "@/lib/services/commissions";
import { attendMyTurn, getMinhaVez, passMyTurn } from "@/lib/services/queue";
import { formatarMoeda } from "@/utils/metasUtils";

export default function ProfissionalMobilePage() {
  useRequireAuth();
  const { profile } = useAuth();
  const { isProfessional } = usePermissions();

  const supabase = createClient();
  const [unidadeId, setUnidadeId] = useState<string | null>(null);

  const [periodo, setPeriodo] = useState<"hoje" | "semana" | "mes" | "custom">("mes");
  const [customRange, setCustomRange] = useState<{ inicio: string; fim: string } | null>(null);
  const { inicio, fim } = useMemo(() => {
    const now = dayjs();
    if (periodo === "hoje") {
      return { inicio: now.startOf("day").format("YYYY-MM-DD"), fim: now.endOf("day").format("YYYY-MM-DD") };
    }
    if (periodo === "semana") {
      return { inicio: now.startOf("week").format("YYYY-MM-DD"), fim: now.endOf("week").format("YYYY-MM-DD") };
    }
    if (periodo === "custom" && customRange) {
      return { inicio: customRange.inicio, fim: customRange.fim };
    }
    // mês
    return { inicio: now.startOf("month").format("YYYY-MM-DD"), fim: now.endOf("month").format("YYYY-MM-DD") };
  }, [periodo, customRange]);

  const [assinaturaCommissionBRL, setAssinaturaCommissionBRL] = useState(0);
  const [avulsaCommissionBRL, setAvulsaCommissionBRL] = useState(0);
  const [produtoCommissionBRL, setProdutoCommissionBRL] = useState(0);
  const [produtosBatidos, setProdutosBatidos] = useState(0);
  const [produtosMeta, setProdutosMeta] = useState(0);
  const [metasFaixas, setMetasFaixas] = useState<number[]>([]); // top 3 metas
  const [metasOpen, setMetasOpen] = useState(false);
  const [vendidosTotal, setVendidosTotal] = useState(0);
  const [assinaturaOpen, setAssinaturaOpen] = useState(false);
  const [avulsaOpen, setAvulsaOpen] = useState(false);
  const [produtoOpen, setProdutoOpen] = useState(false);
  const [realizadosBarbeiro, setRealizadosBarbeiro] = useState<any[]>([]);
  const [avulsasList, setAvulsasList] = useState<any[]>([]);
  const [vendasProdutosList, setVendasProdutosList] = useState<any[]>([]);
  const [faturamentoPeriodo, setFaturamentoPeriodo] = useState(0);
  const [minutosBarbeiro, setMinutosBarbeiro] = useState(0);
  const [minutosTotal, setMinutosTotal] = useState(0);
  const [minhaVez, setMinhaVez] = useState<{ posicao: number | string; totalAtendimentos: number } | null>(null);
  const [acaoLoading, setAcaoLoading] = useState<'attend' | 'pass' | null>(null);
  const produtosPercentual = useMemo(() => {
    return produtosMeta > 0 ? Math.round((produtosBatidos / produtosMeta) * 100) : 0;
  }, [produtosBatidos, produtosMeta]);

  // Resolve ID do barbeiro vinculado ao usuário
  const [barbeiroId, setBarbeiroId] = useState<string | null>(null);
  useEffect(() => {
    (async () => {
      if (!profile?.id) return;
      // tenta achar por user_id, senão por id
      const { data: p1 } = await supabase
        .from("profissionais")
        .select("id, unidade_id")
        .eq("user_id", profile.id)
        .single();
      if (p1?.id) {
        setBarbeiroId(p1.id);
        if (p1.unidade_id) setUnidadeId(p1.unidade_id);
        return;
      }
      const { data: p2 } = await supabase
        .from("profissionais")
        .select("id, unidade_id")
        .eq("id", profile.id)
        .single();
      if (p2?.id) {
        setBarbeiroId(p2.id);
        if (p2.unidade_id) setUnidadeId(p2.unidade_id);
      }
    })();
  }, [profile?.id, supabase]);

  // Carregar dados reais conforme período e barbeiro
  useEffect(() => {
    (async () => {
      if (!barbeiroId || !unidadeId) return;
      // 1) Pagamentos (assinaturas) confirmados no período (ASAAS + assinaturas)
      const inicioISO = dayjs(inicio).format("YYYY-MM-DD");
      const fimISO = dayjs(fim).format("YYYY-MM-DD");
      const pagamentos = await getConfirmedAsaasPayments(inicioISO, fimISO);

      // assinaturas (se houver tabela com status/price)
      const assinaturas = await getAssinaturas().catch(() => []);
      const assinaturasConfirmadas = (assinaturas || []).filter((a: any) => String(a.status).toUpperCase() === "CONFIRMED");

      const faturamentoPeriodoCalc = [
        ...(pagamentos || []).map((p: any) => Number(p.valor) || 0),
        ...assinaturasConfirmadas.map((a: any) => Number(a.price) || Number(a.valor) || 0),
      ].reduce((acc, v) => acc + v, 0);
      setFaturamentoPeriodo(faturamentoPeriodoCalc);

      // 2) Minutos do barbeiro e total da barbearia no período
      const { data: realizados } = await supabase
        .from("servicos_realizados")
        .select("barbeiro_id, data_hora, servico:servico_id(nome, tempo_minutos)")
        .gte("data_hora", `${inicioISO} 00:00:00`)
        .lte("data_hora", `${fimISO} 23:59:59`);

      const minutosTotalCalc = (realizados || []).reduce((acc: number, r: any) => acc + Number(r?.servico?.tempo_minutos || 0), 0);
      const minutosBarbeiroCalc = (realizados || [])
        .filter((r: any) => r.barbeiro_id === barbeiroId)
        .reduce((acc: number, r: any) => acc + Number(r?.servico?.tempo_minutos || 0), 0);
      setMinutosTotal(minutosTotalCalc);
      setMinutosBarbeiro(minutosBarbeiroCalc);
      setRealizadosBarbeiro((realizados || []).filter((r: any) => r.barbeiro_id === barbeiroId));

      const comissaoTotalAssinatura = faturamentoPeriodoCalc * 0.4; // regra usada no painel admin
      const percentual = minutosTotalCalc > 0 ? minutosBarbeiroCalc / minutosTotalCalc : 0;
      setAssinaturaCommissionBRL(Math.max(0, comissaoTotalAssinatura * percentual));

      // 3) Comissões avulsas do barbeiro no período
      const avulsas = await getComissoesAvulsas(barbeiroId, unidadeId || "", inicioISO, fimISO);
      const totalAvulsa = (avulsas || []).reduce((acc: number, a: any) => acc + Number(a.valor_comissao || 0) * Number(a.quantidade || 1), 0);
      setAvulsaCommissionBRL(totalAvulsa);
      setAvulsasList(avulsas || []);

      // 4) Comissão de produto (se houver tabela com valor de comissão). Caso não, mantenha zerado
      // Aqui poderíamos aplicar alguma regra de % sobre vendas de produtos; sem regra definida, manter 0 por enquanto.
      setProdutoCommissionBRL(0);

      // 5) Metas de produto (faixas) e progresso do barbeiro
      const { data: faixas } = await supabase
        .from("metas_trato_faixas")
        .select("quantidade, tipo")
        .eq("tipo", "produtos")
        .eq("barbeiro_id", barbeiroId);
      const metasOrdenadas = (faixas || [])
        .filter((f: any) => !f.tipo || f.tipo === "produtos")
        .map((f: any) => Number(f.quantidade || 0))
        .sort((a: number, b: number) => a - b)
        .slice(0, 3);
      setMetasFaixas(metasOrdenadas);
      const metaSoma = metasOrdenadas.reduce((acc: number, q: number) => acc + q, 0);
      setProdutosMeta(metaSoma > 0 ? metaSoma : 20); // fallback visual

      const vendasProdutos = await getVendasProdutos(barbeiroId, unidadeId || "", inicioISO, fimISO);
      const vendidos = (vendasProdutos || []).reduce((acc: number, v: any) => acc + Number(v.quantidade || 0), 0);
      setProdutosBatidos(vendidos);
      setVendidosTotal(vendidos);
      setVendasProdutosList(vendasProdutos || []);

      // 6) Minha vez (posição e total atendimentos do barbeiro)
      const { queue } = await getMinhaVez(profile.id);
      if (queue) {
        setMinhaVez({ posicao: queue.queue_position, totalAtendimentos: queue.total_services });
      }
    })();
  }, [barbeiroId, unidadeId, inicio, fim, supabase]);

  const onAttended = async () => {
    try {
      setAcaoLoading('attend');
      await attendMyTurn();
      const { queue } = await getMinhaVez(profile.id);
      if (queue) setMinhaVez({ posicao: queue.queue_position, totalAtendimentos: queue.total_services });
    } finally {
      setAcaoLoading(null);
    }
  };

  const onPassTurn = async () => {
    try {
      setAcaoLoading('pass');
      await passMyTurn();
      const { queue } = await getMinhaVez(profile.id);
      if (queue) setMinhaVez({ posicao: queue.queue_position, totalAtendimentos: queue.total_services });
    } finally {
      setAcaoLoading(null);
    }
  };

  if (!isProfessional) {
    return (
      <div className="p-6">
        <div className="text-sm text-gray-600">Acesso destinado a profissionais.</div>
      </div>
    );
  }

  return (
    <div className="min-h-screen max-w-md mx-auto bg-gradient-to-b from-[#0b1420] to-[#0a0f18] text-white pb-24">
      {/* Header */}
      <div className="px-4 pt-6 pb-4 flex items-center justify-between">
        <div className="flex items-center gap-3">
          <Avatar src={profile?.avatar_url} name={profile?.name || "Usuário"} className="ring-2 ring-blue-400/40" />
          <div className="flex flex-col leading-tight">
            <span className="text-sm font-semibold text-white">{profile?.name || "Profissional"}</span>
            <h1 className="text-2xl font-extrabold tracking-wide text-blue-300">COMISSÃO</h1>
          </div>
        </div>
        <ChevronRightIcon className="w-5 h-5 text-gray-400" />
      </div>

      {/* Modal Detalhes Comissão Assinatura */}
      <Modal isOpen={assinaturaOpen} onClose={() => setAssinaturaOpen(false)} size="md" backdrop="blur">
        <ModalContent>
          <ModalHeader>
            <div className="flex flex-col">
              <span className="text-base font-semibold">Comissão de Assinatura</span>
              <span className="text-xs text-gray-500">Rateio por minutos trabalhados</span>
            </div>
          </ModalHeader>
          <ModalBody>
            <div className="space-y-3 text-sm">
              <div className="flex justify-between"><span>Faturamento do período</span><span className="font-semibold">R$ {faturamentoPeriodo.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}</span></div>
              <div className="flex justify-between"><span>Percentual de comissão</span><span className="font-semibold">40%</span></div>
              <Divider className="my-2" />
              <div className="flex justify-between"><span>Minutos (você)</span><span className="font-semibold">{minutosBarbeiro} min</span></div>
              <div className="flex justify-between"><span>Minutos (geral)</span><span className="font-semibold">{minutosTotal} min</span></div>
              <div className="flex justify-between"><span>Participação</span><span className="font-semibold">{minutosTotal > 0 ? Math.round((minutosBarbeiro/minutosTotal)*100) : 0}%</span></div>
              <Divider className="my-2" />
              <div className="flex justify-between text-base"><span>Total da sua comissão</span><span className="font-extrabold text-blue-300">R$ {assinaturaCommissionBRL.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}</span></div>
            </div>
          </ModalBody>
          <ModalFooter>
            <Button variant="light" onPress={() => setAssinaturaOpen(false)}>Fechar</Button>
          </ModalFooter>
        </ModalContent>
      </Modal>

      {/* Modal Detalhes Comissão Avulsa */}
      <Modal isOpen={avulsaOpen} onClose={() => setAvulsaOpen(false)} size="md" backdrop="blur">
        <ModalContent>
          <ModalHeader>
            <div className="flex flex-col">
              <span className="text-base font-semibold">Comissão Avulsa</span>
              <span className="text-xs text-gray-500">Serviços avulsos lançados no período</span>
            </div>
          </ModalHeader>
          <ModalBody>
            {avulsasList.length === 0 ? (
              <div className="text-sm text-gray-500">Nenhum lançamento no período.</div>
            ) : (
              <div className="space-y-3">
                {avulsasList.map((a: any, idx: number) => (
                  <div key={idx} className="flex items-center justify-between text-sm bg-white/5 rounded-lg px-3 py-2">
                    <div>
                      <div className="font-medium text-gray-200">{a?.servicos_avulsos?.nome || 'Serviço'}</div>
                      <div className="text-xs text-gray-400">{new Date(a.data_lancamento).toLocaleDateString('pt-BR')} • x{a.quantidade}</div>
                    </div>
                    <div className="font-semibold text-blue-200">R$ {(Number(a.valor_comissao||0)*Number(a.quantidade||1)).toLocaleString('pt-BR', { minimumFractionDigits: 2 })}</div>
                  </div>
                ))}
                <Divider />
                <div className="flex justify-between text-base">
                  <span>Total</span>
                  <span className="font-extrabold text-blue-300">R$ {avulsaCommissionBRL.toLocaleString('pt-BR', { minimumFractionDigits: 2 })}</span>
                </div>
              </div>
            )}
          </ModalBody>
          <ModalFooter>
            <Button variant="light" onPress={() => setAvulsaOpen(false)}>Fechar</Button>
          </ModalFooter>
        </ModalContent>
      </Modal>

      {/* Modal Detalhes Comissão de Produto */}
      <Modal isOpen={produtoOpen} onClose={() => setProdutoOpen(false)} size="md" backdrop="blur">
        <ModalContent>
          <ModalHeader>
            <div className="flex flex-col">
              <span className="text-base font-semibold">Comissão de Produto</span>
              <span className="text-xs text-gray-500">Vendas de produtos no período</span>
            </div>
          </ModalHeader>
          <ModalBody>
            {vendasProdutosList.length === 0 ? (
              <div className="text-sm text-gray-500">Sem vendas registradas.</div>
            ) : (
              <div className="space-y-3">
                {vendasProdutosList.map((v: any, idx: number) => (
                  <div key={idx} className="flex items-center justify-between text-sm bg-white/5 rounded-lg px-3 py-2">
                    <div>
                      <div className="font-medium text-gray-200">{v?.produto_nome || 'Produto'}</div>
                      <div className="text-xs text-gray-400">{new Date(v.data_venda).toLocaleDateString('pt-BR')} • x{v.quantidade}</div>
                    </div>
                    <div className="font-semibold text-gray-300">{v.quantidade}</div>
                  </div>
                ))}
                <Divider />
                <div className="text-xs text-gray-400">Regra de comissão de produto não definida. Informe a regra para cálculo e eu implemento.</div>
              </div>
            )}
          </ModalBody>
          <ModalFooter>
            <Button variant="light" onPress={() => setProdutoOpen(false)}>Fechar</Button>
          </ModalFooter>
        </ModalContent>
      </Modal>

      {/* Segmentos / Filtros */}
      <div className="px-4 flex items-center gap-2">
        {([
          { key: "hoje", label: "Hoje" },
          { key: "semana", label: "Semana" },
          { key: "mes", label: "Mês" },
          { key: "custom", label: "Custom" },
        ] as const).map((opt) => (
          <Button
            key={opt.key}
            size="sm"
            radius="lg"
            variant={periodo === opt.key ? "solid" : "flat"}
            className={periodo === opt.key ? "bg-blue-500 text-white" : "bg-white/5 text-gray-300"}
            onPress={() => setPeriodo(opt.key)}
          >
            {opt.label}
          </Button>
        ))}
        <Button isIconOnly size="sm" radius="lg" className="bg-white/5 text-gray-300">
          <FunnelIcon className="w-4 h-4" />
        </Button>
      </div>

      {/* Custom range inputs */}
      {periodo === "custom" && (
        <div className="px-4 mt-3 grid grid-cols-2 gap-2">
          <input type="date" className="bg-white/5 text-gray-200 rounded-lg px-3 py-2" value={customRange?.inicio || ""} onChange={(e) => setCustomRange(r => ({ fim: r?.fim || e.target.value, inicio: e.target.value }))} />
          <input type="date" className="bg-white/5 text-gray-200 rounded-lg px-3 py-2" value={customRange?.fim || ""} onChange={(e) => setCustomRange(r => ({ inicio: r?.inicio || e.target.value, fim: e.target.value }))} />
        </div>
      )}

      {/* Cards de comissão + Minha Vez */}
      <div className="px-4 mt-5 grid grid-cols-2 gap-4">
        {/* Minha Vez */}
        <Card className="bg-[#0f1c2b] border border-white/5 col-span-2">
          <CardHeader className="pb-0"><div className="text-sm text-gray-300">Minha Vez</div></CardHeader>
          <CardBody>
            <div className="grid grid-cols-2 gap-3">
              <div className="bg-white/5 rounded-lg p-3 text-center">
                <div className="text-2xl font-bold text-blue-200 whitespace-nowrap">{minhaVez?.totalAtendimentos ?? 0}</div>
                <div className="text-xs text-gray-300">Total que já atendi</div>
              </div>
              <div className="bg-white/5 rounded-lg p-3 text-center">
                <div className="text-2xl font-bold text-blue-200 whitespace-nowrap">{minhaVez?.posicao ?? '-'}</div>
                <div className="text-xs text-gray-300">Minha posição na fila</div>
              </div>
            </div>
            <div className="mt-4 grid grid-cols-2 gap-2">
              <Button isDisabled={acaoLoading !== null} className="bg-green-600 text-white" onPress={onAttended}>
                {acaoLoading === 'attend' ? 'Registrando...' : '✓ Atendi'}
              </Button>
              <Button isDisabled={acaoLoading !== null} variant="flat" className="bg-white/5 text-gray-200" onPress={onPassTurn}>
                {acaoLoading === 'pass' ? 'Atualizando...' : '→ Passar a vez'}
              </Button>
            </div>
          </CardBody>
        </Card>
        <Card className="bg-[#0f1c2b] border border-white/5">
          <CardHeader className="pb-0 flex items-center justify-between">
            <div className="text-sm text-gray-300">Comissão Assinatura</div>
            <Button size="sm" variant="light" className="text-gray-300" onPress={() => setAssinaturaOpen(true)}>Detalhes</Button>
          </CardHeader>
          <CardBody><div className="text-3xl font-extrabold text-blue-200 whitespace-nowrap">{formatarMoeda(assinaturaCommissionBRL)}</div></CardBody>
        </Card>

        <Card className="bg-[#0f1c2b] border border-white/5">
          <CardHeader className="pb-0 flex items-center justify-between">
            <div className="text-sm text-gray-300">Comissão Avulsa</div>
            <Button size="sm" variant="light" className="text-gray-300" onPress={() => setAvulsaOpen(true)}>Detalhes</Button>
          </CardHeader>
          <CardBody><div className="text-3xl font-extrabold text-blue-200 whitespace-nowrap">{formatarMoeda(avulsaCommissionBRL)}</div></CardBody>
        </Card>

        <Card className="bg-[#0f1c2b] border border-white/5">
          <CardHeader className="pb-0 flex items-center justify-between">
            <div className="text-sm text-gray-300">Comissão de Produto</div>
            <Button size="sm" variant="light" className="text-gray-300" onPress={() => setProdutoOpen(true)}>Detalhes</Button>
          </CardHeader>
          <CardBody><div className="text-3xl font-extrabold text-blue-200 whitespace-nowrap">{formatarMoeda(produtoCommissionBRL)}</div></CardBody>
        </Card>

        <Card className="bg-[#0f1c2b] border border-white/5">
          <CardHeader className="pb-0"><div className="text-sm text-gray-300">Metas de Produto</div></CardHeader>
          <CardBody className="flex items-center justify-between gap-4">
            <div className="flex items-center gap-4">
              <CircularProgress value={produtosPercentual} color="warning" aria-label="Progresso de produtos" classNames={{ svg: "w-16 h-16" }} showValueLabel />
              <div className="text-sm text-gray-300">
                <div className="text-xs">{produtosBatidos} / {produtosMeta} Produtos</div>
              </div>
            </div>
            <Button size="sm" radius="lg" className="bg-white/5 text-gray-200" onPress={() => setMetasOpen(true)}>Ver Detalhes</Button>
          </CardBody>
        </Card>
      </div>

      {/* Modal Detalhes de Metas de Produto */}
      <Modal isOpen={metasOpen} onClose={() => setMetasOpen(false)} size="md" backdrop="blur">
        <ModalContent>
          <ModalHeader>
            <div className="flex flex-col">
              <span className="text-base font-semibold">Metas de Produto</span>
              <span className="text-xs text-gray-500">Vendas no período: <strong className="text-blue-300">{vendidosTotal}</strong></span>
            </div>
          </ModalHeader>
          <ModalBody>
            {metasFaixas.length === 0 ? (
              <div className="text-sm text-gray-500">Nenhuma meta cadastrada.</div>
            ) : (
              <div className="flex flex-col gap-4">
                {metasFaixas.map((alvo, idx) => {
                  const progresso = alvo > 0 ? Math.min(100, Math.round((vendidosTotal / alvo) * 100)) : 0;
                  const atingida = vendidosTotal >= alvo;
                  return (
                    <div key={idx}>
                      <div className="flex justify-between text-xs mb-1">
                        <span className="font-medium text-gray-700">Meta {idx + 1}</span>
                        <span className={`font-semibold ${atingida ? 'text-green-600' : 'text-gray-500'}`}>{vendidosTotal}/{alvo}</span>
                      </div>
                      <Progress aria-label={`Progresso Meta ${idx + 1}`} value={progresso} className="w-full h-3" color={atingida ? 'success' : progresso >= 80 ? 'warning' : 'danger'} showValueLabel={false} />
                      <div className="text-[11px] mt-1 text-gray-500">{atingida ? 'Concluída' : `Faltam ${Math.max(0, alvo - vendidosTotal)} produtos`}</div>
                    </div>
                  );
                })}
              </div>
            )}
          </ModalBody>
          <ModalFooter>
            <Button variant="light" onPress={() => setMetasOpen(false)}>Fechar</Button>
          </ModalFooter>
        </ModalContent>
      </Modal>

      {/* Bottom Tab Bar */}
      <nav className="fixed bottom-0 left-0 right-0 max-w-md mx-auto bg-[#0f1c2b] border-t border-white/5 grid grid-cols-5 py-2 px-1">
        <a href="/dashboard" className="flex flex-col items-center text-gray-300 hover:text-white">
          <HomeIcon className="w-5 h-5" />
          <span className="text-[11px]">Home</span>
        </a>
        <a href="/dashboard/agendamentos" className="flex flex-col items-center text-gray-300 hover:text-white">
          <CalendarIcon className="w-5 h-5" />
          <span className="text-[11px]">Agenda</span>
        </a>
        <a href="/profissional" className="flex flex-col items-center text-blue-300">
          <ChartBarIcon className="w-5 h-5" />
          <span className="text-[11px]">Comissão</span>
        </a>
        <a href="/clientes" className="flex flex-col items-center text-gray-300 hover:text-white">
          <UsersIcon className="w-5 h-5" />
          <span className="text-[11px]">Clientes</span>
        </a>
        <a href="#" className="flex flex-col items-center text-gray-300 hover:text-white">
          <Bars3Icon className="w-5 h-5" />
          <span className="text-[11px]">Mais</span>
        </a>
      </nav>
    </div>
  );
}

